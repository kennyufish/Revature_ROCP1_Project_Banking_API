package com.app.banking.controller;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.app.banking.exception.BusinessException;
import com.app.banking.model.Account;
import com.app.banking.service.AccountInforService;
import com.app.banking.service.AccountInforServiceImpl;
import com.app.banking.service.AccountTranscationService;
import com.app.banking.service.AccountTranscationServiceImpl;

/**
 * Servlet implementation class TransferController
 */
public class TransferController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TransferController() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		response.setContentType("text/html");
		RequestDispatcher requestDispatcher = null;
		PrintWriter out = response.getWriter();
		
		AccountInforService accountService = new AccountInforServiceImpl();
		AccountTranscationService accountTranscationService = new AccountTranscationServiceImpl();
		
		Account sourceAccount = new Account();
		//Account targetAccount = new Account();
		try {
			boolean isSuccess = false;
			sourceAccount = (Account) accountService.getAccountById(Integer.parseInt(request.getParameter("sourceAccountId")));
			if (!accountService.validateAccountById(Integer.parseInt(request.getParameter("targetAccountId")))) {
				out.print("<h1>Invalid Recipient ID - Please Try Again</h1>");
			}
			
//			isSuccess=accountTranscationService.depositAccount(sourceAccount.getAccountId(), Double.parseDouble(request.getParameter("depositAmount")));
//			if(isSuccess) {
//				out.print("<div><h1 class='topNoticeUpdateSuccess'>");
//				out.print("$ "+request.getParameter("depositAmount")+" has been deposited to Acoount #"+request.getParameter("accountId")+"<h1></div>");
//			}else {
//				out.print("<div><h1 class='topNoticeUpdateFail'>");
//				out.print("UNSUCCESSFUL DEPOSIT - PLEASE TRY AGAIN"+"<h1></div>");
//			}

			requestDispatcher = request.getRequestDispatcher("accounts");
			requestDispatcher.include(request, response);
			out.print("<h1>trying stuffs</h1>");
			
		} catch (NullPointerException  | NumberFormatException e) {
			requestDispatcher = request.getRequestDispatcher("index.html");
			response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			out.print("<div><h1 class='topNoticeWarning'>*The requested action is not permitted in transfer*<h1></div>");
			out.print("<div><h1 class='topNoticeWarning'>"+e.getMessage()+"<h1></div>");
			requestDispatcher.include(request, response);
		} catch (BusinessException e) {
			requestDispatcher = request.getRequestDispatcher("index.html");
			requestDispatcher.include(request, response);
			out.print("<center><span style='color:red;'>" + e.getMessage() + "</span></center>");
		}
	}

}
